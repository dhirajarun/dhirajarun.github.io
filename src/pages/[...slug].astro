---
import Page from '../components/Page.astro';
import WritingContent from '../components/WritingContent.astro';
import TableOfContents from '../components/TableOfContent/TableOfContent.astro';
import Sidebar from '../components/Sidebar.astro';
import ThreeColumnLayout from '../components/ThreeColumnLayout.astro';
import PageHeading from '../components/PageHeading.astro';
import PageTitle from '../components/PageTitle.astro';
import { TinaMarkdown } from 'tinacms/dist/rich-text';
import { client as tinaClient } from '../../tina/__generated__/client';

export const prerender = true;

// 1. Generate a new path for every collection entry
export async function getStaticPaths() {
  function getRootEntries(name: string) {
    return (item: any) => {
      return {
        params: { slug: `${name}/${item?.node?._sys.filename}` },
        props: {
          title: { about: 'About Me', now: 'Now' }[name] ?? name,
          lastUpdated: item?.node?.lastUpdated ? new Date(item?.node?.lastUpdated) : undefined!,
          publishDate: item?.node?.publishDate ? new Date(item?.node?.publishDate) : undefined!,
          archive: item?.node?.archive || false,
          body: item?.node?.body,
        },
      };
    };
  }

  const aboutConnection = await tinaClient.queries.aboutConnection({
    filter: { draft: { eq: false } },
  });
  const nowConnection = await tinaClient.queries.nowConnection({
    filter: { draft: { eq: false } },
  });

  const aboutEntries =
    aboutConnection.data.aboutConnection.edges?.map((item) => {
      return getRootEntries('about')(item);
    }) || [];

  aboutEntries?.sort(
    (after, before) => before.props.publishDate?.getTime() - after.props.publishDate?.getTime()
  );

  const nowEntries =
    nowConnection.data.nowConnection.edges?.map((item) => {
      return getRootEntries('now')(item);
    }) || [];

  nowEntries?.sort(
    (after, before) => before.props.publishDate?.getTime() - after.props.publishDate?.getTime()
  );

  const aboutEntry = {
    params: {
      ...aboutEntries[0].params,
      slug: 'about',
    },
    props: aboutEntries[0].props,
  };
  const nowEntry = {
    params: {
      ...nowEntries[0].params,
      slug: 'about',
    },
    props: nowEntries[0].props,
  };
  aboutEntry.params.slug = 'about';
  nowEntry.params.slug = 'now';

  return [aboutEntry, nowEntry, ...aboutEntries, ...nowEntries];
}

const { title, publishDate, body } = Astro.props;
---

<Page title={title}>
  <ThreeColumnLayout>
    <main class="center">
      <PageHeading>
        <a class="text-sm" href="/">Back to Home</a>
        <PageTitle>{title}</PageTitle>

        <div class="text-sm text-gray-400 dark:text-gray-400 flex space-x-3">
          <span
            >{
              publishDate.toLocaleDateString('en-us', {
                year: 'numeric',
                month: 'short',
                day: '2-digit',
              })
            }</span
          >
          <!-- <span>{remarkPluginFrontmatter.minutesRead}</span> -->
        </div>
      </PageHeading>
      <WritingContent>
        <TinaMarkdown content={body} />
      </WritingContent>
    </main>
    <aside class="right">
      <Sidebar>
        <!-- <TableOfContents headings={headings} label="Table Of Content" /> -->
      </Sidebar>
    </aside>
  </ThreeColumnLayout>
</Page>

<style is:global>
  .sidebar {
    @apply fixed top-20 pl-5;
  }
</style>
